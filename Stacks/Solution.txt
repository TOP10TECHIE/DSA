Easy Question:

Implement a method in Java to check if a cyclic singly linked list contains a specific element. Return true if the element is found, false otherwise. Provide an example and the expected output.

Sol: 

	public class CyclicSinglyLinkedList {
    private Node head;

    // Node class for the linked list
    private class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public boolean contains(int element) {
        if (head == null)
            return false;

        Node current = head;
        do {
            if (current.data == element)
                return true;
            current = current.next;
        } while (current != head);

        return false;
    }

    // Example usage and expected output
    public static void main(String[] args) {
        CyclicSinglyLinkedList list = new CyclicSinglyLinkedList();
        list.head = list.new Node(1);
        list.head.next = list.new Node(2);
        list.head.next.next = list.new Node(3);
        list.head.next.next.next = list.new Node(4);
        list.head.next.next.next.next = list.head.next; // Creating a cycle

        System.out.println("contains(3) => " + list.contains(3)); // Expected output: true
    }
}



Hard Question:
2. Given a cyclic singly linked list, write a Java function to find the length of the cycle (i.e., the number of nodes within the cycle). Provide an example and the expected output.

Example:
Cyclic Singly Linked List: 1 -> 2 -> 3 -> 4 -> 2 (points back to node 2)

Expected Output:

contains(3) => true
findCycleLength() => 3
Doubly Linked List:

public class CyclicSinglyLinkedList {
    private Node head;

    // Node class for the linked list
    private class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public int findCycleLength() {
        if (head == null)
            return 0;

        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) { // Cycle detected
                int length = 1;
                slow = slow.next;

                while (slow != fast) {
                    length++;
                    slow = slow.next;
                }

                return length;
            }
        }

        return 0; // No cycle found
    }

    // Example usage and expected output
    public static void main(String[] args) {
        CyclicSinglyLinkedList list = new CyclicSinglyLinkedList();
        list.head = list.new Node(1);
        list.head.next = list.new Node(2);
        list.head.next.next = list.new Node(3);
        list.head.next.next.next = list.new Node(4);
        list.head.next.next.next.next = list.head.next; // Creating a cycle

        System.out.println("findCycleLength() => " + list.findCycleLength()); // Expected output: 3
    }
}


Easy Question:
3. Implement a method in Java to insert a node at the end of a doubly linked list. Provide an example and the expected output.

Sol:

public class DoublyLinkedList {
    private Node head;

    // Node class for the linked list
    private class Node {
        int data;
        Node prev;
        Node next;

        Node(int data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }

    public void insertAtEnd(int element) {
        Node newNode = new Node(element);
        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null)
            current = current.next;

        current.next = newNode;
        newNode.prev = current;
    }

    // Example usage and expected output
    public static void main


Hard Question:
4. Given a doubly linked list, write a Java function to find the second-to-last node in the list. Return the node value or null if the list has fewer than two nodes. Provide an example and the expected output.

public class DoublyLinkedList {
    private Node head;

    // Node class for the linked list
    private class Node {
        int data;
        Node prev;
        Node next;

        Node(int data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }

    public void insertAtEnd(int element) {
        Node newNode = new Node(element);
        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null)
            current = current.next;

        current.next = newNode;
        newNode.prev = current;
    }

    // Example usage and expected output
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();
        list.insertAtEnd(1);
        list.insertAtEnd(2);
        list.insertAtEnd(3);
        list.insertAtEnd(4);

        System.out.println("insertAtEnd(5)");
        list.insertAtEnd(5);
    }
}


Example:
Doubly Linked List: 1 <-> 2 <-> 3 <-> 4

Expected Output:
3. insertAtEnd(5)

findSecondToLast() => 3
Please note that the examples and expected outputs provided are for illustration purposes and may vary based on your specific implementation and data.

Sol:

public class DoublyLinkedList {
    private Node head;

    // Node class for the linked list
    private class Node {
        int data;
        Node prev;
        Node next;

        Node(int data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }

    public Integer findSecondToLast() {
        if (head == null || head.next == null)
            return null;

        Node current = head;
        while (current.next.next != null)
            current = current.next;

        return current.data;
    }

    // Example usage and expected output
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();
        list.head = list.new Node(1);
        list.head.next = list.new Node(2);
        list.head.next.next = list.new Node(3);
        list.head.next.next.next = list.new Node(4);

        System.out.println("findSecondToLast() => " + list.findSecondToLast()); // Expected output: 3
    }
}

