queues (Explained)

import java.util.ArrayList;
import java.util.List;

public class Queue_Arraylist {
    private List<Integer> queue;

    public Queue_Arraylist() {
        queue = new ArrayList<>();
    }

    public void enQueue(int data) {
        queue.add(data);
        System.out.println("Enqueued " + data);
    }

    public int deQueue() {
        if (queue.isEmpty()) {
            System.out.println("Queue is Empty!!");
            return -1;
        }
        int removedElement = queue.remove(0);
        System.out.println("Dequeued " + removedElement);
        return removedElement;
    }

    public int peek() {
        if (queue.isEmpty()) {
            System.out.println("Queue is Empty!!");
            return -1;
        }
        int front = queue.get(0);
        System.out.println("Front Element " + front);
        return front;
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }

    public int size() {
        return queue.size();
    }

    public static void main(String[] args) {
        Queue_Arraylist queueArraylist = new Queue_Arraylist();

        queueArraylist.enQueue(2);
        queueArraylist.enQueue(4);
        queueArraylist.enQueue(6);
        queueArraylist.enQueue(8);

        queueArraylist.deQueue();
        queueArraylist.peek();

        System.out.println("Queue is empty? " + queueArraylist.isEmpty());
        System.out.println("Size of Queue: " + queueArraylist.size());
    }
}


Using Package for Queue in Java:

import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    private Queue<Integer> queue;

    public QueueExample() {
        queue = new LinkedList<>();
    }

    public void enqueue(int data) {
        queue.add(data);
        System.out.println("Enqueued: " + data);
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Unable to dequeue.");
            return -1;
        }
        int removedElement = queue.remove();
        System.out.println("Dequeued: " + removedElement);
        return removedElement;
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Unable to peek.");
            return -1;
        }
        int frontElement = queue.peek();
        System.out.println("Front element: " + frontElement);
        return frontElement;
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }

    public int size() {
        return queue.size();
    }

    public static void main(String[] args) {
        QueueExample queueExample = new QueueExample();

        queueExample.enqueue(10);
        queueExample.enqueue(20);
        queueExample.enqueue(30);

        queueExample.dequeue();
        queueExample.peek();

        System.out.println("Is the queue empty? " + queueExample.isEmpty());
        System.out.println("Size of the queue: " + queueExample.size());
    }
}

 